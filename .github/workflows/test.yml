name: Test

on:
  # Run on pushes to `master` and on all pull requests.
  # Prevent the "push" build from running when there are only irrelevant changes.
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  #### PHP LINT STAGE ####
  # Linting against high/low PHP versions should catch everything.
  # If needs be, we can always add interim versions at a later point in time.
  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php: ['5.4', 'latest', '8.2']

    name: "Lint: PHP ${{ matrix.php }}"
    continue-on-error: ${{ matrix.php == '8.2' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          tools: cs2pr

      - name: Install Composer dependencies
        uses: "ramsey/composer-install@v2"
        with:
          # Bust the cache at least once a month - output format: YYYY-MM-DD.
          custom-cache-suffix: $(date -u -d "-0 month -$(($(date +%d)-1)) days" "+%F")

      - name: Lint against parse errors
        run: ./bin/php-lint --checkstyle | cs2pr

  test:
    # No use running the tests if there is a linting error somewhere as they would fail anyway.
    needs: lint

    runs-on: ubuntu-latest

    strategy:
      # Keys:
      # - php: The PHP versions to test against.
      # - phpcs_version: The PHPCS versions to test against.
      #   IMPORTANT: test runs shouldn't fail because of PHPCS being incompatible with a PHP version.
      #   - PHPCS will run without errors on PHP 5.4 - 7.4 on any supported version.
      #   - PHP 8.0 needs PHPCS 3.5.7+ to run without errors.
      # - The `wpcs_version` key is added to allow additional test builds when multiple WPCS versions
      #   would be supported. As, at this time, only the latest stable release of WPCS is supported,
      #   no additional versions are included in the array.
      # - experimental: Whether the build is "allowed to fail".
      matrix:
        php: ['5.4', '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4']
        phpcs_version: ['3.5.5', 'dev-master']
        wpcs_version: ['2.3.*']
        experimental: [false]

        include:
          # Complete the matrix by adding PHP 8.0, but only test against compatible PHPCS versions.
          - php: '8.0'
            phpcs_version: 'dev-master'
            wpcs_version: '2.3.*'
            experimental: false
          - php: '8.0'
            # PHPCS 3.5.7 is the lowest version of PHPCS which supports PHP 8.0.
            phpcs_version: '3.5.7'
            wpcs_version: '2.3.*'
            experimental: false

          # Complete the matrix by adding PHP 8.1, but only test against compatible PHPCS versions.
          - php: '8.1'
            phpcs_version: 'dev-master'
            wpcs_version: '2.3.*'
            experimental: false
          - php: '8.1'
            # PHPCS 3.6.1 is the lowest version of PHPCS which supports PHP 8.1.
            phpcs_version: '3.6.1'
            wpcs_version: '2.3.*'
            experimental: false

          # Experimental builds. These are allowed to fail.
          #- php: '8.2'
          #  phpcs_version: 'dev-master'
          #  wpcs_version: '2.3.*'
          #  experimental: true

    name: "Test: PHP ${{ matrix.php }} - PHPCS ${{ matrix.phpcs_version }} - WPCS ${{ matrix.wpcs_version }}"

    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # On stable PHPCS versions, allow for PHP deprecation notices.
      # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
      # Note: the "elif" condition is temporary and should be removed once VIPCS updates to WPCS 3.0+.
      - name: Setup ini config
        id: set_ini
        run: |
          if [[ "${{ matrix.phpcs_version }}" != "dev-master" ]]; then
            echo 'PHP_INI=error_reporting=E_ALL & ~E_DEPRECATED' >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.php }}" == "8.1" ]]; then
            echo 'PHP_INI=error_reporting=E_ALL & ~E_DEPRECATED' >> $GITHUB_OUTPUT
          else
            echo 'PHP_INI=error_reporting=-1' >> $GITHUB_OUTPUT
          fi

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-values: ${{ steps.set_ini.outputs.PHP_INI }}
          coverage: none

      - name: 'Composer: set PHPCS and WPCS versions for tests'
        run: |
          composer require --no-update --no-scripts squizlabs/php_codesniffer:"${{ matrix.phpcs_version }}" --no-interaction
          composer require --no-update --no-scripts wp-coding-standards/wpcs:"${{ matrix.wpcs_version }}" --no-interaction

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: Install Composer dependencies - normal
        if: ${{ startsWith( matrix.php, '8' ) == false }}
        uses: "ramsey/composer-install@v2"
        with:
          # Bust the cache at least once a month - output format: YYYY-MM-DD.
          custom-cache-suffix: $(date -u -d "-0 month -$(($(date +%d)-1)) days" "+%F")

      # PHPUnit 7.x does not allow for installation on PHP 8, so ignore platform
      # requirements to get PHPUnit 7.x to install on nightly.
      - name: Install Composer dependencies - with ignore platform
        if: ${{ startsWith( matrix.php, '8' ) }}
        uses: "ramsey/composer-install@v2"
        with:
          composer-options: --ignore-platform-reqs
          custom-cache-suffix: $(date -u -d "-0 month -$(($(date +%d)-1)) days" "+%F")

      - name: Run the unit tests
        if: matrix.php < '8.1'
        run: ./bin/unit-tests

      - name: Run the ruleset tests
        run: ./bin/ruleset-tests
