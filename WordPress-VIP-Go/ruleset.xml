<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="WordPress VIP Go" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
	<description>WordPress VIP Go Coding Standards</description>

	<!-- The rules below are the changes from between the original sniff or parent ruleset, and what should be applied for this Standard. -->
	<!-- Each group of rules is order alphabetically -->

	<!-- Include the base VIP Minimum ruleset -->
	<rule ref="WordPressVIPMinimum"/>


	<!-- Things that probably won't work and needs a dev to review -->
	<rule ref="WordPress.WP.AlternativeFunctions.file_system_read_fwrite">
		<type>error</type>
		<message>File system writes only work in /tmp/ and inside the /uploads/ folder on VIP Go. To do filesystem writes you must use the WP_Filesystem class, using functions such as %s() won't work or will return unexpected results. Read more here: https://vip.wordpress.com/documentation/using-wp_filesystem-instead-of-direct-file-access-functions/</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.file_ops_fwrite">
		<severity>6</severity>
		<message>File system writes only work in /tmp/ and inside the /uploads/ folder on VIP Go. To do filesystem writes you must use the WP_Filesystem class, using functions such as %s() won't work or will return unexpected results. Read more here: https://vip.wordpress.com/documentation/using-wp_filesystem-instead-of-direct-file-access-functions/</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.cookies_setcookie">
		<type>error</type>
		<severity>6</severity>
		<message>Due to server-side caching, server-side based client related logic might not work. We recommend implementing client side logic in JavaScript instead.</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Variables.RestrictedVariables.cache_constraints___COOKIE">
		<type>error</type>
		<severity>6</severity>
		<message>Due to server-side caching, server-side based client related logic might not work. We recommend implementing client side logic in JavaScript instead.</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Variables.RestrictedVariables.cache_constraints___SERVER__HTTP_USER_AGENT__">
		<type>error</type>
		<severity>6</severity>
		<message>Due to server-side caching, server-side based client related logic might not work. We recommend implementing client side logic in JavaScript instead.</message>
	</rule>


	<!-- Things that really should be fixed, but don't necessarily have to be for the site to work.
		 This includes potential security holes as well as functions that may bring down sites for performance reasons.
	 -->
	<rule ref="Generic.NamingConventions.ConstructorName.OldStyle">
		<message>This is currently deprecated in PHP 7.0 and will be removed in the future. This will cause a fatal error on newer versions of PHP and should be fixed.</message>
	</rule>
	<rule ref="WordPress.Security.EscapeOutput.OutputNotEscaped"/>
	<!-- Should fix all of them but it doesn't need a manual review -->
	<rule ref="WordPress.Security.EscapeOutput.UnsafePrintingFunction"/>
	<rule ref="WordPress.WP.AlternativeFunctions.file_system_read_file_get_contents">
		<type>error</type>
		<severity>5</severity>
		<message>%s() is uncached. If this is being used to query a remote file please use wpcom_vip_file_get_contents() instead. If it's used for a local file please use WP_Filesystem instead. Read more here: https://vip.wordpress.com/documentation/using-wp_filesystem-instead-of-direct-file-access-functions/</message>
	</rule>
	<rule ref="WordPress.WP.AlternativeFunctions.file_system_read_fclose">
		<type>error</type>
		<message>File operations should use WP_Filesystem methods instead of direct PHP filesystem calls. Found: %s(). Read more here: https://vip.wordpress.com/documentation/using-wp_filesystem-instead-of-direct-file-access-functions/</message>
	</rule>
	<rule ref="WordPress.WP.AlternativeFunctions.file_system_read_fopen">
		<type>error</type>
		<message>File operations should use WP_Filesystem methods instead of direct PHP filesystem calls. Found: %s(). Read more here: https://vip.wordpress.com/documentation/using-wp_filesystem-instead-of-direct-file-access-functions/</message>
	</rule>
	<rule ref="WordPressVIPMinimum.JS.HTMLExecutingFunctions.append">
		<type>error</type>
	</rule>
	<rule ref="WordPressVIPMinimum.Performance.FetchingRemoteData.FileGetContentsUnknown">
		<type>error</type>
		<message>%s() is uncached. If this is being used to query a remote file please use wpcom_vip_file_get_contents() instead. If it's used for a local file please use WP_Filesystem instead. Read more here: https://vip.wordpress.com/documentation/using-wp_filesystem-instead-of-direct-file-access-functions/</message>
	</rule>


	<!-- Warnings and other things -->
	<rule ref="WordPress.Security.NonceVerification.NoNonceVerification">
		<!-- Needs a manual check -->
		<type>warning</type>
		<severity>10</severity>
	</rule>
	<rule ref="WordPress.Security.ValidatedSanitizedInput.InputNotSanitized">
		<!-- Needs a manual check -->
		<type>warning</type>
		<severity>10</severity>
	</rule>
	<rule ref="WordPress.WP.PostsPerPage.posts_per_page_posts_per_page">
		<message>Having more than 100 posts returned per page can lead to severe performance problems.</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Hooks.RestrictedHook.UploadMimes">
		<severity>10</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Security.PHPFilterFunctions.MissingSecondParameter">
		<severity>10</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Security.PHPFilterFunctions.MissingThirdParameter">
		<severity>10</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Security.PHPFilterFunctions.RestrictedFilter">
		<severity>10</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.dbDelta_dbdelta">
		<type>warning</type>
		<severity>7</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.wp_mail_wp_mail">
		<severity>7</severity>
	</rule>


	<!-- VIP Uncached warnings -->
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.attachment_url_to_postid_attachment_url_to_postid">
		<type>warning</type>
		<message>%s() is uncached, please use wpcom_vip_attachment_url_to_postid() instead.</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.get_adjacent_post_get_adjacent_post">
		<type>warning</type>
		<message>%s() is uncached, please use wpcom_vip_get_adjacent_post() instead.</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.get_page_by_title_get_page_by_title">
		<type>warning</type>
		<message>%s() is uncached, please use wpcom_vip_get_page_by_title() instead.</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.get_posts_get_children">
		<type>warning</type>
		<severity>3</severity>
		<message>%s() is uncached and performs a no limit query. Please use get_posts or WP_Query instead. More Info: https://vip.wordpress.com/documentation/vip-go/uncached-functions/</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.get_posts_get_posts">
		<severity>3</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.get_posts_wp_get_recent_posts">
		<severity>3</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.url_to_postid_url_to_postid">
		<type>warning</type>
		<message>%s() is uncached, please use wpcom_vip_url_to_postid() instead.</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.wp_old_slug_redirect_wp_old_slug_redirect">
		<type>warning</type>
		<message>%s() is uncached, please use wpcom_vip_old_slug_redirect() instead.</message>
	</rule>


	<!-- Miscellaneous sub-optimal things -->
	<rule ref="Internal.LineEndings.Mixed">
		<severity>1</severity>
	</rule>
	<rule ref="Generic.PHP.NoSilencedErrors.Discouraged">
		<severity>1</severity>
	</rule>
	<rule ref="Generic.PHP.NoSilencedErrors.Forbidden">
		<severity>1</severity>
	</rule>
	<rule ref="WordPress.CodeAnalysis.AssignmentInCondition.Found">
		<severity>1</severity>
	</rule>
	<rule ref="WordPress.PHP.DevelopmentFunctions.error_log_error_log">
		<message>%s() should not be used in production environments.</message>
	</rule>
	<rule ref="WordPress.PHP.DiscouragedPHPFunctions.urlencode_urlencode">
		<severity>3</severity>
	</rule>
	<rule ref="WordPress.PHP.DontExtract">
		<severity>3</severity>
	</rule>
	<rule ref="WordPress.PHP.StrictComparisons.LooseComparison">
		<severity>3</severity>
	</rule>
	<rule ref="WordPress.PHP.StrictInArray.MissingTrueStrict">
		<severity>3</severity>
	</rule>
	<rule ref="WordPress.Security.EscapeOutput._e">
		<!-- We trust that translations are safe on VIP Go -->
		<severity>1</severity>
	</rule>
	<rule ref="WordPress.Security.EscapeOutput._ex">
		<!-- We trust that translations are safe on VIP Go -->
		<severity>1</severity>
	</rule>
	<rule ref="WordPress.WP.GlobalVariablesOverride.OverrideProhibited">
		<!-- This is often a false positive. Still nice to flag for a check -->
		<severity>3</severity>
	</rule>
	<rule ref="WordPress.WP.EnqueuedResources.NonEnqueuedScript">
		<type>warning</type>
		<severity>3</severity>
		<message>Scripts must be registered/enqueued via `wp_enqueue_script`. This can improve the site's performance due to script concatenation</message>
	</rule>
	<rule ref="WordPress.WP.EnqueuedResources.NonEnqueuedStylesheet">
		<type>warning</type>
		<severity>3</severity>
		<message>Stylesheets must be registered/enqueued via `wp_enqueue_style`. This can improve the site's performance due to styles concatenation</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Performance.LowExpiryCacheTime.LowCacheTime">
		<severity>3</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Files.IncludingFile">
		<type>warning</type>
		<severity>3</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Variables.VariableAnalysis.UndefinedVariable">
		<severity>3</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Variables.VariableAnalysis.UnusedVariable">
		<severity>1</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.UserExperience.AdminBarRemoval.HidingDetected">
		<severity>3</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.UserExperience.AdminBarRemoval.RemovalDetected">
		<severity>3</severity>
	</rule>
	<rule ref="Generic.PHP.NoSilencedErrors.Forbidden">
		<severity>1</severity>
	</rule>
	<rule ref="Generic.PHP.NoSilencedErrors.Discouraged">
		<severity>1</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Security.ProperEscapingFunction.htmlAttrNotByEscHTML">
		<!-- This is still safe, just sub-optimal-->
		<severity>3</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.is_multi_author_is_multi_author">
		<severity>1</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.switch_to_blog_switch_to_blog">
		<type>warning</type>
		<severity>3</severity>
		<message>Switch to blog may not work as you expect. It only changes the database context for the blog. It doesn't load the plugins or theme of that site. This means that filters or hooks that the blog you are switching to uses will not run.</message>
	</rule>
	<rule ref="WordPressVIPMinimum.Performance.WPQueryParams.PostNotIn">
		<severity>3</severity>
	</rule>


	<!-- Silence is golden, these don't affect us on VIP Go -->
	<rule ref="WordPress.DB.SlowDBQuery.slow_db_query_meta_key">
		<!-- We are silencing this one because VIP Go has a combined index on meta_key, meta_value-->
		<severity>0</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Performance.BatcacheWhitelistedParams">
		<!-- We are silencing this one because VIP Go does not use Batcache-->
		<severity>0</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.user_meta_add_user_meta">
		<severity>0</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.user_meta_delete_user_meta">
		<severity>0</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.user_meta_get_user_meta">
		<severity>0</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Functions.RestrictedFunctions.user_meta_update_user_meta">
		<severity>0</severity>
	</rule>
	<rule ref="WordPressVIPMinimum.Variables.RestrictedVariables.user_meta__wpdb__usermeta">
		<severity>0</severity>
	</rule>

</ruleset>
