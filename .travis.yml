sudo: false

dist: trusty

cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

language:
  - php

php:
  - 5.4
  - 5.5
  - 5.6
  - 7.0
  - 7.1
  - 7.2
  - nightly

env:
  # `master` is now 3.x.
  - PHPCS_BRANCH="dev-master"
  # Lowest supported release in the 3.x series with which VIPCS is compatible (and which can run the unit tests).
  - PHPCS_BRANCH="3.1.0"

matrix:
  fast_finish: true
  include:
    # Run PHPCS against VIPCS, run PHP Lint, and run integration test
    - php: 7.2
      env: PHPCS_BRANCH="dev-master" SNIFF=1 INTEGRATION_TEST=1 LINT=1
      addons:
        apt:
          packages:
            - libxml2-utils
  exclude:
    # PHP 7.3 is known to fail with PHPCS < 3.3.1.
    # @link https://github.com/squizlabs/PHP_CodeSniffer/issues/2086
    - php: nightly
      env: PHPCS_BRANCH="3.1.0"

  allow_failures:
    # Allow failures for unstable builds.
    - php: nightly

before_install:
  # Speed up build time by disabling Xdebug.
  # https://johnblackbourn.com/reducing-travis-ci-build-times-for-wordpress-projects/
  # https://twitter.com/kelunik/status/954242454676475904
  - phpenv config-rm xdebug.ini || echo 'No xdebug config.'
  # Validate the composer.json file.
  # @link https://getcomposer.org/doc/03-cli.md#validate
  - composer validate --no-check-all --strict
  # Handle new PHP version with old PHPCS version. Version of PHPUnit 6 is the current latest release.
  - |
    if [[ "$TRAVIS_PHP_VERSION" == "7.2" && "$PHPCS_BRANCH" == "3.1.0" ]]; then
      export USE_OLD_PHPUNIT="1"
      export PHPUNIT_DIR=/tmp/phpunit
      export PHPUNIT6="6.5.11"
    fi

install:
  - composer require squizlabs/php_codesniffer:"$PHPCS_BRANCH" --update-no-dev --no-suggest --no-scripts
  - composer install --dev --no-suggest
  # Download PHPUnit 6.x for builds on PHP 7.2 with PHPCS 3.1.0, as PHPCS 3.1.0 is not compatible with PHPUnit 7.x.
  - if [[ "$USE_OLD_PHPUNIT" == "1" ]]; then wget -P "$PHPUNIT_DIR" "https://phar.phpunit.de/phpunit-$PHPUNIT6.phar" && chmod +x "$PHPUNIT_DIR/phpunit-$PHPUNIT6.phar"; fi

script:
  # Lint the PHP files against parse errors.
  - if [[ "$LINT" == "1" ]]; then if find . -path ./vendor -prune -o -path ./bin -prune -o -name "*.php" -exec php -l {} \; | grep "^[Parse error|Fatal error]"; then exit 1; fi; fi
  # Run the unit tests.
  - |
    if [[ "$USE_OLD_PHPUNIT" == "1" ]]; then
      php "$PHPUNIT_DIR/phpunit-$PHPUNIT6.phar" --filter WordPressVIPMinimum "$(pwd)/vendor/squizlabs/php_codesniffer/tests/AllTests.php"
    else
      phpunit --filter WordPressVIPMinimum "$(pwd)/vendor/squizlabs/php_codesniffer/tests/AllTests.php"
    fi
  # Run PHPCS against VIPCS.
  - if [[ "$SNIFF" == "1" ]]; then "$(pwd)/vendor/bin/phpcs" --runtime-set ignore_warnings_on_exit 1; fi
  # Validate the XML files.
  # @link http://xmlsoft.org/xmllint.html
  - if [[ "$SNIFF" == "1" ]]; then xmllint --noout ./*/ruleset.xml; fi
  # Check the code-style consistency of the XML files.
  - |
    if [[ "$SNIFF" == "1" ]]; then
      export XMLLINT_INDENT="	"
      diff -B --tabsize=4 ./WordPressVIPMinimum/ruleset.xml <(xmllint --format "./WordPressVIPMinimum/ruleset.xml")
      diff -B --tabsize=4 ./WordPress-VIP-Go/ruleset.xml <(xmllint --format "./WordPress-VIP-Go/ruleset.xml")
    fi
  # Run integration test.
  - |
    if [[ "$INTEGRATION_TEST" == "1" ]]; then
      export PHPCS_BIN="$(pwd)/vendor/bin/phpcs"
      php ./ruleset_test.php
    fi
